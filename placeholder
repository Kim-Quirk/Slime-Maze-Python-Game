import arcade
import os
import random
import pandas as pd
import numpy
import constants

class GameView(arcade.View):
    """ Main application class. """

    def __init__(self):
        """
        Initializer
        """
        super().__init__()

        # Set the working directory (where we expect to find files) to the same
        # directory this .py file is in. You can leave this out of your own
        # code, but it is needed to easily run the examples using "python -m"
        # as mentioned at the top of this program.
        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.score = 0

        # Sprite lists
        self.coin_list = None
        self.wall_list = None
        self.player_list = None
        self.door_list = None

        # Set up the player
        self.player_sprite = None
        self.physics_engine = None

    def setup(self):
        """ Set up the game and initialize the variables. """

        # Sprite lists
        self.player_list = arcade.SpriteList()
        self.wall_list = arcade.SpriteList()
        self.coin_list = arcade.SpriteList()
        self.door_list = arcade.SpriteList()

        # Set up the player
        self.player_sprite = arcade.Sprite(":resources:images/enemies/slimeBlock.png", 0.2)

        # -- Set up the walls
        # Create a row of boxes
        maze = pd.read_csv("maze1.csv", skip_blank_lines = False)
        maze = maze.to_numpy()
        print(maze[0, 23])

        for y in range(0, 19):
            for x in range (0, 25):
                if maze[y,x] == "X" or maze[y,x] == "x":
                    wall = arcade.Sprite(":resources:images/tiles/boxCrate_double.png", constants.SPRITE_SCALING)
                    wall.center_x = x*constants.SCALE + 16
                    wall.center_y = y*constants.SCALE + 16
                    self.wall_list.append(wall)
                if maze[y,x] == "P" or maze[y,x] == "p":
                    self.player_sprite.center_x = x*constants.SCALE + 16
                    self.player_sprite.center_y = y*constants.SCALE + 16
                    self.player_list.append(self.player_sprite)
                if maze[y,x] == "D" or maze[y,x] == "d":
                    door = arcade.Sprite(":resources:images/tiles/doorClosed_mid.png", constants.SPRITE_SCALING)
                    door.center_x = x*constants.SCALE + 16
                    door.center_y = y*constants.SCALE + 16
                    self.door_list.append(door)
                if maze[y,x] == "C" or maze[y,x] == "c":
                    coin = arcade.Sprite(":resources:images/items/coinGold.png", constants.SPRITE_SCALING_COIN)
                    coin.center_x = x*constants.SCALE + 16
                    coin.center_y = y*constants.SCALE + 16
                    self.coin_list.append(coin)

        self.physics_engine = arcade.PhysicsEngineSimple(self.player_sprite,
                                                         self.wall_list)
    
    def on_show(self):
        arcade.set_background_color(arcade.color.AMAZON)

        # Don't show the mouse cursor
        self.window.set_mouse_visible(False)

    def on_draw(self):
        """
        Render the screen.
        """

        # This command has to happen before we start drawing
        arcade.start_render()

        # Draw all the sprites.
        self.player_list.draw()
        self.wall_list.draw()
        self.coin_list.draw()
        self.door_list.draw()

        # Put the text on the screen.
        output = f"Coins: {self.score}"
        arcade.draw_text(output, 16, 2, arcade.color.WHITE, 14)

    def on_key_press(self, key, modifiers):
        """Called whenever a key is pressed. """

        if key == arcade.key.W:
            self.player_sprite.change_y = constants.MOVEMENT_SPEED
        elif key == arcade.key.S:
            self.player_sprite.change_y = -constants.MOVEMENT_SPEED
        elif key == arcade.key.A:
            self.player_sprite.change_x = -constants.MOVEMENT_SPEED
        elif key == arcade.key.D:
            self.player_sprite.change_x = constants.MOVEMENT_SPEED
        print(self.player_sprite.center_x, ", ", self.player_sprite.center_y)

        if key == arcade.key.R:
            self.setup()

    def on_key_release(self, key, modifiers):
        """Called when the user releases a key. """

        if key == arcade.key.W or key == arcade.key.S:
            self.player_sprite.change_y = 0
        elif key == arcade.key.A or key == arcade.key.D:
            self.player_sprite.change_x = 0

    def on_update(self, delta_time):
        """ Movement and game logic """

        # Call update on all sprites (The sprites don't do much in this
        # example though.)
        self.physics_engine.update()
        # Generate a list of all sprites that collided with the player.
        hit_list = arcade.check_for_collision_with_list(self.player_sprite, self.coin_list)

        # Loop through each colliding sprite, remove it, and add to the score.
        for coin in hit_list:
            coin.remove_from_sprite_lists()
            self.score += 1
        
        if arcade.check_for_collision_with_list(self.player_sprite, self.door_list):
            view = GameOverView()
            self.window.show_view(view)